/* Auto-generated by genmsg_cpp for file /home/kl/rosw/sandbox/eva/msg/arm_vel_msg.msg */
#ifndef EVA_MESSAGE_ARM_VEL_MSG_H
#define EVA_MESSAGE_ARM_VEL_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace eva
{
template <class ContainerAllocator>
struct arm_vel_msg_ {
  typedef arm_vel_msg_<ContainerAllocator> Type;

  arm_vel_msg_()
  : command()
  , servo(0)
  , direction(0)
  , clockwise(0)
  , position(0)
  {
  }

  arm_vel_msg_(const ContainerAllocator& _alloc)
  : command(_alloc)
  , servo(0)
  , direction(0)
  , clockwise(0)
  , position(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  command;

  typedef int8_t _servo_type;
  int8_t servo;

  typedef int8_t _direction_type;
  int8_t direction;

  typedef int8_t _clockwise_type;
  int8_t clockwise;

  typedef int8_t _position_type;
  int8_t position;


  typedef boost::shared_ptr< ::eva::arm_vel_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::eva::arm_vel_msg_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct arm_vel_msg
typedef  ::eva::arm_vel_msg_<std::allocator<void> > arm_vel_msg;

typedef boost::shared_ptr< ::eva::arm_vel_msg> arm_vel_msgPtr;
typedef boost::shared_ptr< ::eva::arm_vel_msg const> arm_vel_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::eva::arm_vel_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::eva::arm_vel_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace eva

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::eva::arm_vel_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::eva::arm_vel_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::eva::arm_vel_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fc870de37598bb4ce537d2acaebe3b83";
  }

  static const char* value(const  ::eva::arm_vel_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfc870de37598bb4cULL;
  static const uint64_t static_value2 = 0xe537d2acaebe3b83ULL;
};

template<class ContainerAllocator>
struct DataType< ::eva::arm_vel_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eva/arm_vel_msg";
  }

  static const char* value(const  ::eva::arm_vel_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::eva::arm_vel_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string command\n\
int8 servo\n\
int8 direction\n\
int8 clockwise\n\
int8 position\n\
\n\
";
  }

  static const char* value(const  ::eva::arm_vel_msg_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::eva::arm_vel_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.command);
    stream.next(m.servo);
    stream.next(m.direction);
    stream.next(m.clockwise);
    stream.next(m.position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct arm_vel_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::eva::arm_vel_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::eva::arm_vel_msg_<ContainerAllocator> & v) 
  {
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command);
    s << indent << "servo: ";
    Printer<int8_t>::stream(s, indent + "  ", v.servo);
    s << indent << "direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.direction);
    s << indent << "clockwise: ";
    Printer<int8_t>::stream(s, indent + "  ", v.clockwise);
    s << indent << "position: ";
    Printer<int8_t>::stream(s, indent + "  ", v.position);
  }
};


} // namespace message_operations
} // namespace ros

#endif // EVA_MESSAGE_ARM_VEL_MSG_H

